@using System.Globalization;
@using GBX.NET;
@using GBX.NET.Engines.Game;
@using System.Runtime.InteropServices.JavaScript;
@using MapViewerEngine.Modules;
@using MapViewerEngine.Shared;

@inherits ToolComponentBase
@implements IAsyncDisposable

@inject IJSRuntime JS
@inject IDynamicScriptService DynamicScript
@inject MapViewerEngineHubConnection HubConnection
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

<AuthorizeView>
    <Authorized>
        <div class="container">
            <div class="rectangle info-panel">
                <div>FPS:</div>
                <div>@FPS</div>
                <div>Calls:</div>
                <div>@Calls</div>
                <div>Triangles:</div>
                <div>@Triangles</div>
                <div>Geometries:</div>
                <div>@Geometries</div>
                <div>Textures:</div>
                <div>@Textures</div>
            </div>

            @if (tool?.Map is not null)
            {
                <div class="map-name">
                    <FormattedText Text="@tool.Map.MapName" />
                    <div class="map-author">by <FormattedText Text="@(tool.Map.AuthorNickname ?? tool.Map.AuthorLogin)" /></div>
                </div>
            }

            @if (Exc is not null)
            {
                <div style="position: absolute;">@Exc</div>
            }

            @ChildContent

            <canvas></canvas>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="simply-centered">
            This tool requires being logged in to better regulate its behaviour. Sorry for inconvenience.
            <LoginButton></LoginButton>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    private Timer? timer;

    private JSObject? renderer;

    private CGameCtnChallenge? map;
    private MapViewerEngineTool? tool;

    [Parameter]
    public EventCallback BeforeMapLoaded { get; set; }

    [Parameter]
    public EventCallback OnMapLoaded { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool AutoStart { get; set; } = true;

    public string? Exc { get; set; }

    public int RefreshInterval { get; set; } = 500;
    public int FPS { get; private set; }
    public int Calls { get; private set; }
    public int Triangles { get; private set; }
    public int Geometries { get; private set; }
    public int Textures { get; private set; }

    protected override void OnInitialized()
    {
        timer = new Timer(TimerCallback, null, 0, RefreshInterval);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!AutoStart)
        {
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity is null)
        {
            return;
        }
        
        if (tool is not null)
        {
            return;
        }

        await base.OnParametersSetAsync();

        switch (ProceedType.ToLowerInvariant())
        {
            case "selected":
                map = this.GbxSelection.FirstOrDefault()?.Object?.Node as CGameCtnChallenge;
                break;
            case "mx":
                if (!QueryParameters.TryGetValue("site", out string? site))
                {
                    throw new Exception("Missing site query parameter");
                }

                if (!QueryParameters.TryGetValue("trackid", out string? trackId))
                {
                    throw new Exception("Missing trackid query parameter");
                }

                using (var response = await Http.GetAsync($"api/v1/mx/track/{site}/{trackId}"))
                {
                    if (response.IsSuccessStatusCode)
                    {
                        using var stream = await response.Content.ReadAsStreamAsync();
                        map = GameBox.ParseNode<CGameCtnChallenge>(stream);
                    }
                }
                break;
            default:
                break;
        }
        
        if (map is null)
        {
            return;
        }

        tool = new MapViewerEngineTool(map) { HubConnection = HubConnection };

        await StartAsync(tool);
    }

    public async Task StartAsync(MapViewerEngineTool tool)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity is null)
        {
            return;
        }

        await JSHost.ImportAsync("three", "https://unpkg.com/three@0.149.0/build/three.min.js");
        await JSHost.ImportAsync(nameof(Renderer), "../_content/MapViewerEngine/js/renderer.js");
        await JSHost.ImportAsync(nameof(Cam), "../_content/MapViewerEngine/js/cam.js");
        await JSHost.ImportAsync(nameof(Solid), "../_content/MapViewerEngine/js/solid.js");
        await JSHost.ImportAsync(nameof(Shader), "../_content/MapViewerEngine/js/shader.js");

        //await JSHost.ImportAsync("anime", "../_content/MapViewerEngine/js/anime.es.js");
        await JSHost.ImportAsync(nameof(Timeline), "../_content/MapViewerEngine/js/timeline.js");

        renderer = Renderer.Create();
        Renderer.CreateScene();
        var cam = Cam.Create(distance: 256);

        Renderer.SpawnSampleObjects();

        Renderer.Animate();

        Cam.SetTarget(tool.AbsoluteTrueMapCenter.X, 48, tool.AbsoluteTrueMapCenter.Z);

        await BeforeMapLoaded.InvokeAsync();

        await tool.LoadAsync();

        await OnMapLoaded.InvokeAsync();
    }

    private int? framesBefore;

    protected void TimerCallback(object? state)
    {
        var info = renderer?.GetPropertyAsJSObject("info");

        if (info is null)
        {
            return;
        }

        var infoRender = info.GetPropertyAsJSObject("render");

        if (infoRender is not null)
        {
            var framesNow = infoRender.GetPropertyAsInt32("frame");

            FPS = (framesNow - framesBefore.GetValueOrDefault(framesNow)) * (1000 / RefreshInterval);

            framesBefore = framesNow;

            Calls = infoRender.GetPropertyAsInt32("calls");
            Triangles = infoRender.GetPropertyAsInt32("triangles");
        }

        var infoMemory = info.GetPropertyAsJSObject("memory");

        if (infoMemory is not null)
        {
            Geometries = infoMemory.GetPropertyAsInt32("geometries");
            Textures = infoMemory.GetPropertyAsInt32("textures");
        }

        StateHasChanged();
    }

    protected override async ValueTask DisposeAsync(bool disposing)
    {
        if (tool is not null)
        {
            tool.Dispose();
        }

        await HubConnection.StopAsync();

        timer?.Dispose();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity is not null)
        {
            Renderer.Dispose();
        }

        await base.DisposeAsync(disposing);
    }
}